<?php

require_once '../lib/Request.php';
require_once '../lib/router/RouteDefinitionInterface.php';
require_once '../lib/router/RouteDefinition.php';
require_once '../lib/router/RouteException.php';
require_once '../lib/router/RouterInterface.php';
require_once '../lib/router/Router.php';


/**
 * Test class for Router.
 * Generated by PHPUnit on 2011-10-11 at 17:27:09.
 */
class RouterTest extends PHPUnit_Framework_TestCase
{
	/**
	 * @var \lib\router\Router
	 */
	protected $object;

	/**
	 * @var \lib\router\RouteDefinition
	 */
	protected $definition;

	/**
	 * @var \lib\Request
	 */
	protected $Request;

	/**
	 * @var array
	 */
	protected $tArr = array();

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		$this->object = new \lib\router\Router(false, false);

		$this->Request = new \lib\Request();
		$this->Request->baseName = 'http://127.0.0.1';

		$this->object->register(new \lib\router\RouteDefinition(null, '/router/{yada:\w}/{foo:\w\d}.html', 'pl:generic:CoreController:router'));
		$this->object->register(new \lib\router\RouteDefinition(null, '/router/{yada:\w}/{bar:\d}.html', 'pl:generic:CoreController:router'));
		$this->object->register(new \lib\router\RouteDefinition(null, '/router/{page:\d}/', 'pl:generic:CoreController:router'));
		$this->object->register(new \lib\router\RouteDefinition(null, '/router/{foo:\w}/', 'pl:generic:CoreController:router', array('id' => 1)));
		$this->object->register(new \lib\router\RouteDefinition(null, '/router/{bar:\w}.html', 'pl:generic:CoreController:router', array('id' => 1)));
		$this->object->register(new \lib\router\RouteDefinition(null, '/router/', 'pl:generic:CoreController:router'));

		$this->tArr['./router/'] = array();
		$this->tArr['./router/'] = array('generic:CoreController:router');
		$this->tArr['./router/'] = array('pl:generic:CoreController:router');
		$this->tArr['./router/?foobar=true'] = array('pl:generic:CoreController:router', array('foobar' => 'true'));
		$this->tArr['./router/3/'] = array('pl:generic:CoreController:router', array('page' => 3));
		$this->tArr['./router/foo/'] = array('pl:generic:CoreController:router', array('foo' => 'foo'));
		$this->tArr['./router/bar.html'] = array('pl:generic:CoreController:router', array('bar' => 'bar'));

		$this->tArr[$this->Request->baseName.'/router/'] = array('generic:CoreController:router', null, false, true);
		$this->tArr[$this->Request->baseName.'/router/'] = array('pl:generic:CoreController:router', null, false, true);
		$this->tArr[$this->Request->baseName.'/router/?foobar=true'] = array('pl:generic:CoreController:router', array('foobar' => 'true'), false, true);
		$this->tArr[$this->Request->baseName.'/router/3/'] = array('pl:generic:CoreController:router', array('page' => 3), false, true);
		$this->tArr[$this->Request->baseName.'/router/foo/'] = array('pl:generic:CoreController:router', array('foo' => 'foo'), false, true);
		$this->tArr[$this->Request->baseName.'/router/bar.html'] = array('pl:generic:CoreController:router', array('bar' => 'bar'), false, true);

		$this->tArr['?controller=pl_generic_CoreController_router'] = array(null, null, true);
		$this->tArr['?controller=pl_generic_CoreController_router'] = array('generic:CoreController:router', null, true);
		$this->tArr['?controller=pl_generic_CoreController_router'] = array('pl:generic:CoreController:router', null, true);
		$this->tArr['?controller=pl_generic_CoreController_router&foobar=true'] = array('pl:generic:CoreController:router', array('foobar' => 'true'), true);
		$this->tArr['?controller=pl_generic_CoreController_router&page=3'] = array('pl:generic:CoreController:router', array('page' => 3), true);
		$this->tArr['?controller=pl_generic_CoreController_router&foo=foo'] = array('pl:generic:CoreController:router', array('foo' => 'foo'), true);
		$this->tArr['?controller=pl_generic_CoreController_router&bar=bar'] = array('pl:generic:CoreController:router', array('bar' => 'bar'), true);

		$this->tArr[$this->Request->baseName.'/?controller=pl_generic_CoreController_router'] = array(null, null, true, true);
		$this->tArr[$this->Request->baseName.'/?controller=pl_generic_CoreController_router'] = array('generic:CoreController:router', null, true, true);
		$this->tArr[$this->Request->baseName.'/?controller=pl_generic_CoreController_router'] = array('pl:generic:CoreController:router', null, true, true);
		$this->tArr[$this->Request->baseName.'/?controller=pl_generic_CoreController_router&foobar=true'] = array('pl:generic:CoreController:router', array('foobar' => 'true'), true, true);
		$this->tArr[$this->Request->baseName.'/?controller=pl_generic_CoreController_router&page=3'] = array('pl:generic:CoreController:router', array('page' => 3), true, true);
		$this->tArr[$this->Request->baseName.'/?controller=pl_generic_CoreController_router&foo=foo'] = array('pl:generic:CoreController:router', array('foo' => 'foo'), true, true);
		$this->tArr[$this->Request->baseName.'/?controller=pl_generic_CoreController_router&bar=bar'] = array('pl:generic:CoreController:router', array('bar' => 'bar'), true, true);

		$this->tArr[$this->Request->baseName.'/router/yada/123.html'] = array('pl:generic:CoreController:router', array('yada' => 'yada', 'bar' => 123), false, true);
		$this->tArr[$this->Request->baseName.'/router/yada/abc.html'] = array('pl:generic:CoreController:router', array('yada' => 'yada', 'foo' => 'abc'), false, true);
		$this->tArr[$this->Request->baseName.'/router/yada/a12.html'] = array('pl:generic:CoreController:router', array('yada' => 'yada', 'foo' => 'a12'), false, true);
		$this->tArr[$this->Request->baseName.'/router/yada/1ab.html'] = array('pl:generic:CoreController:router', array('yada' => 'yada', 'foo' => '1ab'), false, true);
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {
	}

	public function testRegister() {
		$this->assertInstanceOf('\lib\router\Router', $this->object->register(new \lib\router\RouteDefinition(null, '/router/', 'pl:app:CoreController:router')));
	}

	public function testMatch() {
		foreach($this->tArr as $url => $arg) {
			if(strpos($url, '?controller=pl_generic_CoreController_router' !== false)) {
				continue;
			}
			else {
				$this->Request->url = strpos($url, '.') === 0 ? substr($url, 1) : $url;
			}

			$this->object->match($this->Request);

			$this->assertEquals('pl', $this->Request->lang);
			$this->assertEquals('generic\controller\CoreController', $this->Request->controller);
			$this->assertEquals('router', $this->Request->action);
		}
	}

	public function testMake() {
		$this->Request->url = '/router/';
		$this->object->match($this->Request);

		foreach($this->tArr as $expected => $arg) {
			$this->assertEquals(
				$expected,
				$this->object->make(
					isset($arg[0]) ? $arg[0] : null,
					isset($arg[1]) ? $arg[1] : array(),
					isset($arg[2]) ? $arg[2] : false,
					isset($arg[3]) ? $arg[3] : false
				)
			);
		}
	}

}